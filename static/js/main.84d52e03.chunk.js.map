{"version":3,"sources":["components/AddProjectForm.js","components/SideBar.js","components/Header.js","components/AddTodoForm.js","components/TodoDone.js","components/TodoLabel.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["AddProjectForm","handleShow","setState","show","state","changeItem","newItem","prevState","item","name","handleChange","e","target","value","handleSubmit","preventDefault","props","addProject","Button","className","title","onClick","this","Modal","onHide","Header","closeButton","Body","Form","onSubmit","Group","controlId","Label","Control","required","type","placeholder","onChange","variant","Footer","React","Component","SideBar","projects","deleteProject","project","length","id","map","ProjectIndex","key","callbackFromParent","Col","md","lg","Row","href","AddTodoForm","date","description","priority","isDone","addTodo","projectIndex","as","TodoDone","todoIndex","checkDone","todos","style","color","TodoLabel","deleteTodo","projectName","addTodoForm","Accordion","Card","Toggle","eventKey","xs","Collapse","App","splice","localStorage","setItem","JSON","stringify","selectedProjectIndex","Math","random","concat","index","push","myCallback","storedProjects","getItem","parse","Container","fluid","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84d52e03.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Form } from 'react-bootstrap';\r\nimport './AddProjectForm.css'\r\n\r\nclass AddProjectForm extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            show: false,\r\n            item: { name: '' }\r\n        };\r\n    }\r\n\r\n    //show and hide the modal Form\r\n    handleShow = () => {\r\n        this.setState({ show: !this.state.show })\r\n    }\r\n\r\n    // update the name inside the item object in the state\r\n    changeItem = (newItem) => {\r\n        this.setState((prevState) => {\r\n            let item = { ...prevState.item };  // creating copy of state variable item\r\n            item.name = newItem;               // update the name property, assign a new value                 \r\n            return { item };                   // return new object item object\r\n        })\r\n    }\r\n\r\n    // update the name inside the item object depends on the target value\r\n    handleChange = (e) => {\r\n        this.changeItem(e.target.value);\r\n    }\r\n\r\n    /**\r\n     * this method sends the whole item object from our state\r\n     * to out App component to add that object to our projects array\r\n     */\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addProject(this.state.item);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button className='add-project-button' title=\"Add New Project\" onClick={this.handleShow}>+</Button>\r\n                <Modal show={this.state.show} onHide={this.handleShow}>\r\n                    <Modal.Header closeButton>Add Project</Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n\r\n                            <Form.Group controlId=\"name\">\r\n                                <Form.Label>Project Name</Form.Label>\r\n                                <Form.Control required='required' type=\"text\" placeholder=\"Project Name\" onChange={this.handleChange} />\r\n                            </Form.Group>\r\n                            <Button variant=\"primary\" type=\"submit\" onClick={this.handleShow}>\r\n                                Add\r\n                            </Button>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button onClick={this.handleShow}>Close</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddProjectForm;","import React from 'react';\r\nimport './SideBar.css'\r\nimport { Col } from 'react-bootstrap';\r\nimport AddProjectForm from './AddProjectForm'\r\n\r\n\r\nfunction SideBar(props) {\r\n\r\n    const { projects, deleteProject, addProject } = props;\r\n\r\n    const project = projects.length === 0 ? (<p id='no-projects-to-show'>Click + to add a project</p>)\r\n        : (\r\n            projects.map((item, ProjectIndex) => {\r\n\r\n                const showTodos = () => {\r\n                    props.callbackFromParent(ProjectIndex);\r\n                }\r\n\r\n                return (\r\n                    <div key={item.id} className='project-item'>\r\n                        <span\r\n                            className='project-name'\r\n                            onClick={showTodos}\r\n                        >{item.name}</span>\r\n\r\n                        <span\r\n                            className='delete-project'\r\n                            onClick={() => deleteProject(ProjectIndex)}\r\n                            title='Delete'\r\n                        ><i className=\"fa fa-trash\"></i></span>\r\n                    </div>\r\n                )\r\n            })\r\n        )\r\n\r\n    return (\r\n        <Col md={4} lg={3} className='side-bar'>\r\n            <p>MY Projects</p>\r\n\r\n            <AddProjectForm addProject={addProject} />\r\n\r\n            <div>{project}</div>\r\n        </Col>\r\n    )\r\n}\r\n\r\nexport default SideBar;","import React from 'react';\r\nimport './Header.css'\r\nimport { Col, Row } from 'react-bootstrap';\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <Row className='header'>\r\n            <Col>\r\n                <p className=\"header-name\"><a href=\"index.html\">ToDÔoÔ</a></p>\r\n            </Col>\r\n            <Col className=\"s-media\">\r\n                <a href=\"https://www.github.com/hamohuh/\"><i className=\"fa fa-github\"></i></a>\r\n                <a href=\"https://www.twitter.com/hamohuh/\"><i className=\"fa fa-twitter\"></i></a>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Form } from 'react-bootstrap';\r\nimport './AddTodoForm.css'\r\n\r\nclass AddTodoForm extends React.Component {\r\n    state = {\r\n        show: false,\r\n        name: '',\r\n        date: '',\r\n        description: '',\r\n        priority: ''\r\n    }\r\n\r\n    //handle show and hide the form modal\r\n    handleShow = () => {\r\n        this.setState({ show: !this.state.show })\r\n    }\r\n\r\n    // update state on any from input change\r\n    handleChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n\r\n    /**\r\n     * this method creats new object from our state\r\n     * and sends it to the the App component via the addTodo function\r\n     * to add that item at a specific project index\r\n     */\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let item = { name: this.state.name, date: this.state.date, description: this.state.description, priority: this.state.priority, isDone: false };\r\n        this.props.addTodo(item, this.props.projectIndex)\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button className='add-todo-button' title=\"Add new Todo\" onClick={this.handleShow}>+</Button>\r\n                <Modal show={this.state.show} onHide={this.handleShow}>\r\n                    <Modal.Header closeButton>Add Todo</Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n\r\n                            <Form.Group controlId=\"name\">\r\n                                <Form.Control type=\"text\" name=\"name\" placeholder=\"Todo Name\" onChange={this.handleChange} required='required' />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"description\">\r\n                                <Form.Control type=\"textarea\" name=\"description\" placeholder=\"Description\" onChange={this.handleChange} required='required' />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"date\">\r\n                                <Form.Control type=\"date\" name=\"date\" placeholder=\"Todo Date\" onChange={this.handleChange} required='required' />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n                                <Form.Control onChange={this.handleChange} name=\"priority\" as=\"select\" required>\r\n                                    <option value=''>Select Priority</option>\r\n                                    <option value='normal'>Normal</option>\r\n                                    <option value='medium'>Medium</option>\r\n                                    <option value='important'>Important</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Button variant=\"primary\" type=\"submit\" onClick={this.handleShow}>\r\n                                Add\r\n                            </Button>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button onClick={this.handleShow}>Close</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodoForm;","import React from 'react';\r\n\r\n/**\r\n * this Functional component checks the done state for every todo item in the projects array\r\n * if the state is false it returns an icon with a grey color\r\n * once we click on the grey icon it turns the state to true and the icon to green\r\n */\r\nfunction TodoDone(props) {\r\n\r\n    const { projects, projectIndex, todoIndex, checkDone } = props;\r\n\r\n    if (projects[projectIndex].todos[todoIndex].isDone === false) {\r\n        return (<span className=\"todo-done\" onClick={() => checkDone(projectIndex, todoIndex)} style={{ color: 'grey' }} title=\"Mark as done\"><i className=\"fa fa-check-square-o\"></i></span>)\r\n    }\r\n    return (<span className=\"todo-done\" style={{ color: 'rgb(31, 180, 98)' }} title=\"Mark as done\"><i className=\"fa fa-check-square-o\"></i></span>);\r\n}\r\nexport default TodoDone;","import React from 'react'\r\n\r\n/**\r\n* this Functional component checks the priority for each todo and set the todo priority color\r\n* it returns an icon with a specific color  depends on the priority value\r\n* normal => green, medium => orange, important => red\r\n*/\r\nfunction TodoLabel(props) {\r\n\r\n    const { projects, projectIndex, todoIndex } = props;\r\n\r\n    if (projects[projectIndex].todos[todoIndex].priority === 'normal') {\r\n        return <span className=\"todo-label\" style={{ color: 'rgb(0, 196, 31)' }} title=\"Todo importance\"><i className=\"fa fa-angle-double-right\"></i></span>\r\n    }\r\n    if (projects[projectIndex].todos[todoIndex].priority === 'medium') {\r\n        return <span className=\"todo-label\" style={{ color: 'rgb(255, 251, 0)' }} title=\"Todo importance\"><i className=\"fa fa-angle-double-right\"></i></span>\r\n    }\r\n    return <span className=\"todo-label\" style={{ color: 'rgb(255, 60, 0)' }} title=\"Todo importance\"><i className=\"fa fa-angle-double-right\"></i></span>\r\n\r\n}\r\n\r\nexport default TodoLabel","import React from 'react';\r\nimport './Body.css'\r\nimport AddTodoForm from './AddTodoForm'\r\nimport TodoDone from './TodoDone'\r\nimport TodoLabel from './TodoLabel'\r\nimport { Accordion } from 'react-bootstrap'\r\nimport { Card, Col, Row } from 'react-bootstrap'\r\n\r\nfunction Body(props) {\r\n\r\n    //the component props\r\n    const { projects, projectIndex, addTodo, deleteTodo, checkDone } = props;\r\n\r\n    /**\r\n    * if the projects length = 0 it returns a paragragh saying there are no items to show\r\n    * if there's any projects in the array it will render the todos inside the project\r\n    */\r\n    const todo = () => {\r\n        if (projects.length === 0) {\r\n            return <p id='no-items-to-show'>No items to show</p>\r\n        }\r\n        if (projects[projectIndex].todos.length === 0) {\r\n            return <p id='no-items-to-show'>No items to show</p>\r\n        }\r\n        return projects[projectIndex].todos.map((item, todoIndex) => {\r\n            return (\r\n                <Card className='todo' key={item.id}>\r\n                    <Accordion.Toggle className='card-header' as={Card.Header} eventKey={item.id}>\r\n                        <Row>\r\n                            <Col xs={2} md={1} className=\"todo-left-side\">\r\n                                <TodoDone\r\n                                    projects={projects}\r\n                                    checkDone={checkDone}\r\n                                    projectIndex={projectIndex}\r\n                                    todoIndex={todoIndex}\r\n                                />\r\n                                <TodoLabel\r\n                                    projects={projects}\r\n                                    projectIndex={projectIndex}\r\n                                    todoIndex={todoIndex}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={10} md={7} className='todo-name'>\r\n                                {item.name}\r\n                            </Col>\r\n                            <Col xs={10} md={3} className=\"todo-date\">\r\n                                {item.date}\r\n                            </Col>\r\n                            <Col xs={2} md={1} className=\"delete-todo\">\r\n                                <span onClick={() => { deleteTodo(projectIndex, todoIndex) }} title=\"Delete\"><i className=\"fa fa-trash\"></i></span>\r\n                            </Col>\r\n                        </Row>\r\n                    </Accordion.Toggle>\r\n\r\n                    <Accordion.Collapse eventKey={item.id}>\r\n                        <Card.Body className=\"card-body\">{item.description}</Card.Body>\r\n                    </Accordion.Collapse>\r\n\r\n                </Card>\r\n            )\r\n        })\r\n    }\r\n\r\n    //the selected project name    \r\n    const projectName = projects.length === 0\r\n        ? (<p className=\"selected-project-name\">Please add a project.</p>)\r\n        : (<p className=\"selected-project-name\">{projects[projectIndex].name}</p>)\r\n\r\n    //hide and show the add todo form depends on the projects length   \r\n    const addTodoForm = projects.length === 0\r\n        ? (null)\r\n        : (<AddTodoForm\r\n            addTodo={addTodo}\r\n            projectIndex={projectIndex}\r\n        />)\r\n\r\n    return (\r\n        <Col md={8} lg={9} className='body'>\r\n\r\n            {projectName}\r\n\r\n            {addTodoForm}\r\n\r\n            {<Accordion className='todos'>\r\n                {todo()}\r\n            </Accordion>}\r\n        </Col>\r\n    )\r\n\r\n}\r\n\r\nexport default Body;","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport SideBar from './components/SideBar';\r\nimport Header from './components/Header';\r\nimport Body from './components/Body';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //get the saved data from localStorage\r\n    const storedProjects = localStorage.getItem(\"projectsArray\");\r\n\r\n    this.state = {\r\n      projects: (storedProjects) ? JSON.parse(storedProjects) : [\r\n        {\r\n          id: 1, name: 'Tutorial 1', todos: [\r\n            { id: 1, name: \"Add project\", date: '2020-02-20', description: \"You can add a new project by clicking ' + ' next to My projects on the left top and type the project name then press 'Add'\", isDone: true, priority: 'normal' },\r\n            { id: 2, name: \"Select specific Project\", date: '2020-02-21', description: 'Then you can select a specefic project you wanna add todos to it', isDone: false, priority: 'medium' }]\r\n        },\r\n        {\r\n          id: 2, name: 'Tutorial 2', todos: [\r\n            { id: 1, name: \"Adding new todo\", date: '2020-02-22', description: \"To add a new todo, select the targeted project then press '+' on the top righ\", isDone: false, priority: 'important' },\r\n            { id: 2, name: \"Adding new todo info\", date: '2020-02-23', description: \"In the pop up form just fill the information about your todo and Ta Da it's added to your selected project\", isDone: true, priority: 'normal' }]\r\n        },\r\n        {\r\n          id: 3, name: 'Tutorial 3', todos: [\r\n            { id: 1, name: \"See a Todo info\", date: '2020-02-24', description: \"Just click the Todo name and it will toggle a menue with the details you added earlier\", isDone: true, priority: 'normal' },\r\n            { id: 2, name: \"Mark Todo as done\", date: '2020-02-25', description: \"Just click Alright mark next to the todo name and once you click it it will mark green means it's done\", isDone: false, priority: 'medium' }]\r\n        }\r\n      ],\r\n      selectedProjectIndex: 0\r\n    };\r\n  }\r\n\r\n  // delete project from the projects\r\n  deleteProject = (ProjectIndex) => {\r\n    let projects = [...this.state.projects];  // creating a copy of the array\r\n    projects.splice(ProjectIndex, 1);\r\n    this.setState({ projects });\r\n    localStorage.setItem('projectsArray', JSON.stringify(projects));\r\n    this.setState({ selectedProjectIndex: 0 });\r\n  }\r\n\r\n  //add project to the projects array\r\n  addProject = (item) => {\r\n    item.id = Math.random();\r\n    item.todos = [];\r\n    const projects = this.state.projects.concat(item);\r\n    //or\r\n    /* let projects = [...this.state.projects];\r\n    projects.push(item) */\r\n    this.setState({ projects });\r\n    localStorage.setItem('projectsArray', JSON.stringify(projects));\r\n  }\r\n\r\n  //add todo at a specific index to a projects\r\n  addTodo = (item, index) => {\r\n    item.id = Math.random();\r\n    let projects = [...this.state.projects];\r\n    projects[index].todos.push(item);\r\n    this.setState({ projects });\r\n    localStorage.setItem('projectsArray', JSON.stringify(projects));\r\n  }\r\n\r\n  //delete todo at a specific index\r\n  deleteTodo = (projectIndex, todoIndex) => {\r\n    let projects = [...this.state.projects];  // creating a copy of the array\r\n\r\n    projects[projectIndex].todos.splice(todoIndex, 1);\r\n    this.setState({ projects });\r\n    localStorage.setItem('projectsArray', JSON.stringify(projects));\r\n\r\n  }\r\n\r\n  //check if the todo is done done\r\n  checkDone = (projectIndex, todoIndex) => {\r\n    let projects = [...this.state.projects];\r\n    projects[projectIndex].todos[todoIndex].isDone = true;\r\n    this.setState({ projects });\r\n    localStorage.setItem('projectsArray', JSON.stringify(projects));\r\n  }\r\n\r\n  //callback function to get the projects Index from the child and pass it to the other child\r\n  myCallback = (projectIndex) => {\r\n    this.setState({ selectedProjectIndex: projectIndex });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container fluid className=\"App\">\r\n        <Header />\r\n        <Row>\r\n          <SideBar\r\n            projects={this.state.projects}\r\n            deleteProject={this.deleteProject}\r\n            addProject={this.addProject}\r\n            callbackFromParent={this.myCallback}\r\n          />\r\n          <Body\r\n            projects={this.state.projects}\r\n            projectIndex={this.state.selectedProjectIndex}\r\n            addTodo={this.addTodo}\r\n            deleteTodo={this.deleteTodo}\r\n            checkDone={this.checkDone}\r\n          />\r\n        </Row>\r\n      </Container>\r\n\r\n    )\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}